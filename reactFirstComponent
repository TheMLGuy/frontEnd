import React, { Component } from "react";
class Counter extends Component {
  state = {
    count: 1
  };
  styles = {
    fontWeight: "bold",
    fontSize: 50
  };
  /*
  State can be used to hold data that a component needs
  */
  render() {
    return (
      <React.Fragment>
        <span style={this.styles} className={this.getBadgeClasses()}>
          {this.formatCount()}
        </span>
        <button className="btn btn-secondary btn-sm">Just a button</button>
      </React.Fragment>
    );
  }

  getBadgeClasses() {
    let classes = "badge m-2 badge-";
    classes += this.state.count == 0 ? "warning" : "primary";
    return classes;
  }

  formatCount() {
    const { count } = this.state;
    return count == 0 ? "Zero" : count;
  }
  /*
  Suppose I need to indicate different label colors according to the value, for instance blue for normal,
   yellow for warning and so on, this can be dynamically managed by 
  */
  /*
    Suppose I need to add more tags to my existing jsx, I will wrap the extra
     tags with a div, else babel does not understand that tags are different and would 
     throw an error saying a parent element needs to be present.
    */

  /*
    Can use REACT.FRAGMENT to ensure that the extraneous div is not considered as 
    a dom element. This can be a performance improvement when the DOM tree is deeply nested.
    */
}

export default Counter;
