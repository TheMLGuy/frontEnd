import React, { Component } from "react";
class Counter extends Component {
  /*
  State can be used to hold data that a component needs
  */
  state = {
    count: 0,
    tags: ["tag1", "tag2", "tag3"]
  };
  styles = {
    fontWeight: "bold",
    fontSize: 50
  };
  /*
  constructor() {
    super();
    this.incrementClick = this.incrementClick.bind(this);
  }

  incrementClick() {
    this.state.count += 1;
    console.log("Increment has been clicked " + this.state.count);
  }
  */
  incrementClick = product => {
    console.log(product);
    this.setState({ count: (this.state.count += 1) });
    console.log("Increment clicked ", this.state.count);
  };

  /*
  calling incrementClick does not work resulting in an exception because this is undefined
  One approach is to bind the 'this' variable in a constructor. This is a slightly inefficienct approach considering that
  every event handler has to be handled manually
  So use a arrow approach to bind event handlers much cleaner approach
  If DOM has to be updated to place the new updated state value then use setState() function.
  */

  render() {
    return (
      <React.Fragment>
        <span style={this.styles} className={this.getBadgeClasses()}>
          {this.formatCount()}
        </span>
        <button
          onClick={() => {
            this.incrementClick({ id: 1 });
          }}
          className="btn btn-secondary btn-sm"
        >
          Just a button
        </button>
        <ul>
          {this.state.tags.map(tag => (
            <li key={tag}>{tag}</li>
          ))}
        </ul>
      </React.Fragment>
    );
  }

  getBadgeClasses() {
    let classes = "badge m-2 badge-";
    classes += this.state.count == 0 ? "warning" : "primary";
    return classes;
  }

  formatCount() {
    const { count } = this.state;
    return count == 0 ? "Zero" : count;
  }
  /*
  Suppose I need to indicate different label colors according to the value, for instance blue for normal,
   yellow for warning and so on, this can be dynamically managed by 
  */
  /*
    Suppose I need to add more tags to my existing jsx, I will wrap the extra
     tags with a div, else babel does not understand that tags are different and would 
     throw an error saying a parent element needs to be present.
    */

  /*
    Can use REACT.FRAGMENT to ensure that the extraneous div is not considered as 
    a dom element. This can be a performance improvement when the DOM tree is deeply nested.
    */
}

export default Counter;
